---
// This component fetches and displays content generated by the LLM agent
// It connects to the backend API which retrieves content from Strapi CMS

import { Image } from "astro:assets";
import FormattedDate from "./FormattedDate.astro";

// Fetch content from the backend API
let agentContent = [];
try {
  // Use relative URL that will work with Netlify redirects in production
  const response = await fetch('/api/website/agent-content');
  if (response.ok) {
    agentContent = await response.json();
    console.log('Fetched agent content:', agentContent);
  } else {
    console.error('Failed to fetch agent content:', response.status);
    // Fallback to placeholder data if API call fails
    agentContent = [
      {
        id: 1,
        title: "AI-Generated Market Analysis",
        description: "An analysis of current market trends generated by the Business Assistant LLM agent.",
        publishedAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        content: "This is a placeholder for agent-generated content. The API call failed, but in production, this would contain actual content created by your LLM agent through the Strapi CMS integration."
      },
      {
        id: 2,
        title: "Weekly Business Insights",
        description: "Automated insights about your business performance compiled by the agent.",
        publishedAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(), // 7 days ago
        updatedAt: new Date().toISOString(),
        content: "Another placeholder for agent-generated content. The agent would regularly update this with new insights based on your business data."
      }
    ];
  }
} catch (error) {
  console.error('Error fetching agent content:', error);
  // Use the same fallback data as above
  agentContent = [
    {
      id: 1,
      title: "AI-Generated Market Analysis",
      description: "An analysis of current market trends generated by the Business Assistant LLM agent.",
      publishedAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      content: "This is a placeholder for agent-generated content. The API call failed, but in production, this would contain actual content created by your LLM agent through the Strapi CMS integration."
    },
    {
      id: 2,
      title: "Weekly Business Insights",
      description: "Automated insights about your business performance compiled by the agent.",
      publishedAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(), // 7 days ago
      updatedAt: new Date().toISOString(),
      content: "Another placeholder for agent-generated content. The agent would regularly update this with new insights based on your business data."
    }
  ];
}
---

<div class="agent-content">
  {
    agentContent.map(item => (
      <div class="agent-content-item mb-6 pb-6 border-b border-gray-300 dark:border-gray-700">
        <h2 class="text-xl font-medium">{item.title}</h2>
        <div class="flex items-center space-x-2 mt-1 mb-2 text-sm text-gray-500 dark:text-gray-400">
          <span>Published: <FormattedDate datetime={new Date(item.publishedAt)} /></span>
          <span>â€¢</span>
          <span>Updated: <FormattedDate datetime={new Date(item.updatedAt)} /></span>
        </div>
        <p class="text-gray-700 dark:text-gray-300">{item.description}</p>
        {item.coverImage && (
          <div class="my-4">
            <img 
              src={item.coverImage.url} 
              alt={item.coverImage.alt || item.title} 
              width={item.coverImage.width || 800} 
              height={item.coverImage.height || 400}
              class="rounded-lg shadow-md"
            />
          </div>
        )}
        <div class="mt-4 prose dark:prose-invert max-w-none">
          <p>{item.content}</p>
        </div>
      </div>
    ))
  }
  
  <div class="mt-8 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
    <h3 class="text-lg font-medium mb-2">Request New Content</h3>
    <p class="text-sm mb-4">
      Want the AI agent to generate content on a specific topic? Enter your request below:
    </p>
    <div class="flex gap-2">
      <input 
        type="text" 
        id="content-topic-input"
        placeholder="Enter a topic (e.g., 'Market trends in tech')" 
        class="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
      />
      <button 
        id="request-content-button"
        class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
      >
        Request Content
      </button>
    </div>
  </div>
  
  <div class="mt-8 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
    <h3 class="text-lg font-medium mb-2">How This Works</h3>
    <p class="text-sm">
      This page displays content that is automatically generated and managed by the Business Assistant LLM agent.
      The agent connects to the website through the Strapi CMS integration, allowing it to create, update, and
      publish content without human intervention. You can request specific content using the form above.
    </p>
  </div>
</div>

<script>
  // This script handles client-side interactivity for the agent content
  console.log("Agent content component loaded");
  
  // Function to request new content from the agent
  async function requestNewContent(topic) {
    try {
      const response = await fetch('/api/website/request-content', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ topic }),
      });
      
      if (response.ok) {
        const result = await response.json();
        alert(`Content request submitted! The agent will generate content about "${topic}" soon.`);
        // In a real implementation, we might poll for updates or use websockets
        // to refresh the page when new content is available
        setTimeout(() => {
          window.location.reload();
        }, 3000);
      } else {
        console.error('Failed to request content:', response.status);
        alert('Failed to submit content request. Please try again later.');
      }
    } catch (error) {
      console.error('Error requesting content:', error);
      alert('An error occurred while submitting your request.');
    }
  }
  
  // Set up event listeners when the DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    const requestButton = document.getElementById('request-content-button');
    const topicInput = document.getElementById('content-topic-input');
    
    if (requestButton && topicInput) {
      requestButton.addEventListener('click', () => {
        const topic = topicInput.value.trim();
        if (topic) {
          requestNewContent(topic);
        } else {
          alert('Please enter a topic for the content.');
        }
      });
    }
  });
</script>
